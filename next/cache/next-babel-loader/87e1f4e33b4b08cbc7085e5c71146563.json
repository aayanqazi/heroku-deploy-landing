{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { useToggle } from '../../hooks';\nimport CheckBoxStyle from './checkbox.style';\n\nconst CheckBox = (_ref) => {\n  let {\n    className,\n    isChecked,\n    labelText,\n    value,\n    id,\n    htmlFor,\n    labelPosition,\n    isMaterial,\n    disabled\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"className\", \"isChecked\", \"labelText\", \"value\", \"id\", \"htmlFor\", \"labelPosition\", \"isMaterial\", \"disabled\"]);\n\n  // use toggle hooks\n  const [toggleValue, toggleHandler] = useToggle(isChecked); // Add all classs to an array\n\n  const addAllClasses = ['reusecore__checkbox']; // Add label position class\n\n  if (labelPosition) {\n    addAllClasses.push(`label_${labelPosition}`);\n  } // isMaterial prop checking\n\n\n  if (isMaterial) {\n    addAllClasses.push('is-material');\n  } // className prop checking\n\n\n  if (className) {\n    addAllClasses.push(className);\n  } // label control\n\n\n  const LabelField = labelText && __jsx(\"span\", {\n    className: \"reusecore__field-label\"\n  }, labelText);\n\n  const position = labelPosition || 'right';\n  return __jsx(CheckBoxStyle, _extends({\n    className: addAllClasses.join(' ')\n  }, props), __jsx(\"label\", {\n    htmlFor: htmlFor\n  }, position === 'left' || position === 'right' ? LabelField : '', __jsx(\"input\", _extends({\n    type: \"checkbox\",\n    className: \"checkbox\",\n    id: id,\n    value: value,\n    checked: toggleValue,\n    onChange: toggleHandler,\n    disabled: disabled\n  }, props)), __jsx(\"div\", null)));\n};\n\n/** Checkbox default proptype */\nCheckBox.defaultProps = {\n  isChecked: false,\n  labelText: 'Checkbox label',\n  labelPosition: 'right',\n  disabled: false\n};\nexport default CheckBox;","map":null,"metadata":{},"sourceType":"module"}